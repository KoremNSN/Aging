
// Code generated by stanc v2.28.0
#include <stan/model/model_header.hpp>
namespace RW_model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 78> locations_array__ = 
{" (found before start of program)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 18, column 2 to column 17)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 20, column 2 to column 27)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 23, column 2 to column 17)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 24, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 25, column 2 to column 20)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 30, column 2 to column 24)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 35, column 2 to column 31)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 36, column 2 to column 18)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 37, column 2 to column 17)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 38, column 2 to column 30)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 41, column 4 to column 56)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 40, column 17 to line 42, column 3)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 40, column 2 to line 42, column 3)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 44, column 2 to column 40)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 45, column 2 to column 39)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 46, column 2 to column 51)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 81, column 2 to column 30)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 82, column 2 to column 16)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 83, column 2 to column 15)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 84, column 2 to column 28)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 87, column 2 to column 18)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 89, column 2 to column 29)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 90, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 91, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 92, column 2 to column 29)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 96, column 6 to column 19)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 97, column 6 to column 14)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 100, column 6 to column 17)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 102, column 6 to column 21)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 106, column 8 to column 111)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 109, column 8 to column 43)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 112, column 8 to column 52)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 104, column 30 to line 113, column 7)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 104, column 6 to line 113, column 7)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 95, column 19 to line 114, column 5)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 95, column 4 to line 114, column 5)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 94, column 2 to line 115, column 3)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 51, column 2 to column 23)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 52, column 2 to column 23)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 55, column 2 to column 26)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 56, column 2 to column 26)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 57, column 2 to column 26)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 58, column 2 to column 29)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 62, column 4 to column 17)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 63, column 4 to column 12)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 65, column 4 to column 15)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 68, column 6 to column 77)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 71, column 6 to column 40)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 74, column 6 to column 50)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 67, column 28 to line 75, column 5)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 67, column 4 to line 75, column 5)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 61, column 17 to line 76, column 3)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 61, column 2 to line 76, column 3)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 2, column 2 to column 17)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 3, column 2 to column 17)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 4, column 30 to column 31)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 4, column 2 to column 33)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 5, column 23 to column 24)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 5, column 26 to column 27)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 5, column 2 to column 29)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 6, column 31 to column 32)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 6, column 34 to column 35)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 6, column 2 to column 37)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 7, column 29 to column 30)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 7, column 32 to column 33)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 7, column 2 to column 35)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 11, column 2 to column 36)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 12, column 2 to column 29)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 23, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 24, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 25, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 30, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 35, column 26 to column 27)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 36, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 37, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 38, column 18 to column 19)",
 " (in '/home/nachshon/Documents/Aging/Reversal/RW_model.stan', line 87, column 15 to column 16)"};



class RW_model_model final : public model_base_crtp<RW_model_model> {

 private:
  int N;
  int T;
  std::vector<int> Tsubj;
  std::vector<std::vector<double>> rating;
  std::vector<std::vector<int>> lambda;
  std::vector<std::vector<int>> stim;
  Eigen::Matrix<double, -1, 1> initV__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> initV{nullptr, 0};
 
 public:
  ~RW_model_model() { }
  
  inline std::string model_name() const final { return "RW_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.0", "stancflags = "};
  }
  
  
  RW_model_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "RW_model_model_namespace::RW_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 54;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 54;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 54;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 55;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 55;
      check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 56;
      validate_non_negative_index("Tsubj", "N", N);
      current_statement__ = 57;
      context__.validate_dims("data initialization","Tsubj","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      Tsubj = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 57;
      Tsubj = context__.vals_i("Tsubj");
      current_statement__ = 57;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 57;
        check_greater_or_equal(function__, "Tsubj[sym1__]",
                               Tsubj[(sym1__ - 1)], 1);
      }
      current_statement__ = 57;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 57;
        check_less_or_equal(function__, "Tsubj[sym1__]", Tsubj[(sym1__ - 1)],
                            T);
      }
      current_statement__ = 58;
      validate_non_negative_index("rating", "T", T);
      current_statement__ = 59;
      validate_non_negative_index("rating", "N", N);
      current_statement__ = 60;
      context__.validate_dims("data initialization","rating","double",
           std::vector<size_t>{static_cast<size_t>(T),
            static_cast<size_t>(N)});
      rating = std::vector<std::vector<double>>(T, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> rating_flat__;
        current_statement__ = 60;
        rating_flat__ = context__.vals_r("rating");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 60;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 60;
            assign(rating, rating_flat__[(pos__ - 1)],
              "assigning variable rating", index_uni(sym2__),
                                             index_uni(sym1__));
            current_statement__ = 60;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 60;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 60;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 60;
          check_greater_or_equal(function__, "rating[sym1__, sym2__]",
                                 rating[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 61;
      validate_non_negative_index("lambda", "T", T);
      current_statement__ = 62;
      validate_non_negative_index("lambda", "N", N);
      current_statement__ = 63;
      context__.validate_dims("data initialization","lambda","int",
           std::vector<size_t>{static_cast<size_t>(T),
            static_cast<size_t>(N)});
      lambda = std::vector<std::vector<int>>(T, std::vector<int>(N, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> lambda_flat__;
        current_statement__ = 63;
        lambda_flat__ = context__.vals_i("lambda");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 63;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 63;
            assign(lambda, lambda_flat__[(pos__ - 1)],
              "assigning variable lambda", index_uni(sym2__),
                                             index_uni(sym1__));
            current_statement__ = 63;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 63;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 63;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 63;
          check_greater_or_equal(function__, "lambda[sym1__, sym2__]",
                                 lambda[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 63;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 63;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 63;
          check_less_or_equal(function__, "lambda[sym1__, sym2__]",
                              lambda[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 64;
      validate_non_negative_index("stim", "T", T);
      current_statement__ = 65;
      validate_non_negative_index("stim", "N", N);
      current_statement__ = 66;
      context__.validate_dims("data initialization","stim","int",
           std::vector<size_t>{static_cast<size_t>(T),
            static_cast<size_t>(N)});
      stim = std::vector<std::vector<int>>(T, std::vector<int>(N, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> stim_flat__;
        current_statement__ = 66;
        stim_flat__ = context__.vals_i("stim");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 66;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 66;
            assign(stim, stim_flat__[(pos__ - 1)],
              "assigning variable stim", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 66;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 66;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 66;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 66;
          check_greater_or_equal(function__, "stim[sym1__, sym2__]",
                                 stim[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 66;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 66;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 66;
          check_less_or_equal(function__, "stim[sym1__, sym2__]",
                              stim[(sym1__ - 1)][(sym2__ - 1)], 2);
        }
      }
      current_statement__ = 67;
      initV__ = Eigen::Matrix<double, -1, 1>(2);
      new (&initV) Eigen::Map<Eigen::Matrix<double, -1, 1>>(initV__.data(), 2);
      stan::math::fill(initV, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 68;
      assign(initV, rep_vector(0.5, 2), "assigning variable initV");
      current_statement__ = 67;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 67;
        check_greater_or_equal(function__, "initV[sym1__]",
                               initV[(sym1__ - 1)], 0);
      }
      current_statement__ = 67;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 67;
        check_less_or_equal(function__, "initV[sym1__]", initV[(sym1__ - 1)],
                            1);
      }
      current_statement__ = 69;
      validate_non_negative_index("A_pr", "N", N);
      current_statement__ = 70;
      validate_non_negative_index("alpha_pr", "N", N);
      current_statement__ = 71;
      validate_non_negative_index("beta_pr", "N", N);
      current_statement__ = 72;
      validate_non_negative_index("sigma_er_pr", "N", N);
      current_statement__ = 73;
      validate_non_negative_index("A", "N", N);
      current_statement__ = 74;
      validate_non_negative_index("alpha", "N", N);
      current_statement__ = 75;
      validate_non_negative_index("beta", "N", N);
      current_statement__ = 76;
      validate_non_negative_index("sigma_er", "N", N);
      current_statement__ = 77;
      validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 4 + 4 + N + N + N + N;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "RW_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_p;
      current_statement__ = 1;
      mu_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(4);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, 4);
      Eigen::Matrix<local_scalar_t__, -1, 1> A_pr;
      current_statement__ = 3;
      A_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_pr;
      current_statement__ = 4;
      alpha_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   N);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_pr;
      current_statement__ = 5;
      beta_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_er_pr;
      current_statement__ = 6;
      sigma_er_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      N);
      Eigen::Matrix<local_scalar_t__, -1, 1> A;
      A = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(A, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(beta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_er;
      sigma_er = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(sigma_er, DUMMY_VAR__);
      
      current_statement__ = 13;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 11;
        assign(A,
          Phi_approx(
            (rvalue(mu_p, "mu_p", index_uni(1)) +
              (rvalue(sigma, "sigma", index_uni(1)) *
                rvalue(A_pr, "A_pr", index_uni(i))))),
          "assigning variable A", index_uni(i));
      }
      current_statement__ = 14;
      assign(alpha,
        add(rvalue(mu_p, "mu_p", index_uni(2)),
          multiply(rvalue(sigma, "sigma", index_uni(2)), alpha_pr)),
        "assigning variable alpha");
      current_statement__ = 15;
      assign(beta,
        add(rvalue(mu_p, "mu_p", index_uni(3)),
          multiply(rvalue(sigma, "sigma", index_uni(3)), beta_pr)),
        "assigning variable beta");
      current_statement__ = 16;
      assign(sigma_er,
        stan::math::exp(
          add(rvalue(mu_p, "mu_p", index_uni(4)),
            multiply(rvalue(sigma, "sigma", index_uni(4)), sigma_er_pr))),
        "assigning variable sigma_er");
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 7;
        check_greater_or_equal(function__, "A[sym1__]", A[(sym1__ - 1)], 0);
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 7;
        check_less_or_equal(function__, "A[sym1__]", A[(sym1__ - 1)], 1);
      }
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 10;
        check_greater_or_equal(function__, "sigma_er[sym1__]",
                               sigma_er[(sym1__ - 1)], 0);
      }
      {
        current_statement__ = 38;
        lp_accum__.add(normal_lpdf<propto__>(mu_p, 0, 1));
        current_statement__ = 39;
        lp_accum__.add(cauchy_lpdf<propto__>(sigma, 0, 5));
        current_statement__ = 40;
        lp_accum__.add(normal_lpdf<propto__>(A_pr, 0, 1));
        current_statement__ = 41;
        lp_accum__.add(normal_lpdf<propto__>(alpha_pr, 0, 1));
        current_statement__ = 42;
        lp_accum__.add(normal_lpdf<propto__>(beta_pr, 0, 1));
        current_statement__ = 43;
        lp_accum__.add(normal_lpdf<propto__>(sigma_er_pr, 0, 1));
        current_statement__ = 53;
        for (int i = 1; i <= N; ++i) {
          Eigen::Matrix<local_scalar_t__, -1, 1> ev;
          ev = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
          stan::math::fill(ev, DUMMY_VAR__);
          
          local_scalar_t__ PE;
          PE = DUMMY_VAR__;
          
          current_statement__ = 46;
          assign(ev, initV, "assigning variable ev");
          current_statement__ = 51;
          for (int t = 1; t <= rvalue(Tsubj, "Tsubj", index_uni(i)); ++t) {
            current_statement__ = 47;
            lp_accum__.add(
              normal_lpdf<propto__>(
                rvalue(rating, "rating", index_uni(t), index_uni(i)),
                (rvalue(alpha, "alpha", index_uni(i)) +
                  (rvalue(beta, "beta", index_uni(i)) *
                    rvalue(ev, "ev",
                      index_uni(rvalue(stim, "stim",
                                  index_uni(t), index_uni(i)))))),
                rvalue(sigma_er, "sigma_er", index_uni(i))));
            current_statement__ = 48;
            PE = (rvalue(lambda, "lambda", index_uni(t), index_uni(i)) -
                   rvalue(ev, "ev",
                     index_uni(rvalue(stim, "stim",
                                 index_uni(t), index_uni(i)))));
            current_statement__ = 49;
            assign(ev,
              (rvalue(ev, "ev",
                 index_uni(rvalue(stim, "stim", index_uni(t), index_uni(i))))
                + (rvalue(A, "A", index_uni(i)) * PE)),
              "assigning variable ev", index_uni(rvalue(stim, "stim",
                                                   index_uni(t), index_uni(i))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "RW_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu_p;
      current_statement__ = 1;
      mu_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(4);
      Eigen::Matrix<double, -1, 1> sigma;
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, 4);
      Eigen::Matrix<double, -1, 1> A_pr;
      current_statement__ = 3;
      A_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<double, -1, 1> alpha_pr;
      current_statement__ = 4;
      alpha_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   N);
      Eigen::Matrix<double, -1, 1> beta_pr;
      current_statement__ = 5;
      beta_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<double, -1, 1> sigma_er_pr;
      current_statement__ = 6;
      sigma_er_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      N);
      Eigen::Matrix<double, -1, 1> A;
      A = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(A, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sigma_er;
      sigma_er = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sigma_er, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(mu_p);
      out__.write(sigma);
      out__.write(A_pr);
      out__.write(alpha_pr);
      out__.write(beta_pr);
      out__.write(sigma_er_pr);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 11;
        assign(A,
          Phi_approx(
            (rvalue(mu_p, "mu_p", index_uni(1)) +
              (rvalue(sigma, "sigma", index_uni(1)) *
                rvalue(A_pr, "A_pr", index_uni(i))))),
          "assigning variable A", index_uni(i));
      }
      current_statement__ = 14;
      assign(alpha,
        add(rvalue(mu_p, "mu_p", index_uni(2)),
          multiply(rvalue(sigma, "sigma", index_uni(2)), alpha_pr)),
        "assigning variable alpha");
      current_statement__ = 15;
      assign(beta,
        add(rvalue(mu_p, "mu_p", index_uni(3)),
          multiply(rvalue(sigma, "sigma", index_uni(3)), beta_pr)),
        "assigning variable beta");
      current_statement__ = 16;
      assign(sigma_er,
        stan::math::exp(
          add(rvalue(mu_p, "mu_p", index_uni(4)),
            multiply(rvalue(sigma, "sigma", index_uni(4)), sigma_er_pr))),
        "assigning variable sigma_er");
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 7;
        check_greater_or_equal(function__, "A[sym1__]", A[(sym1__ - 1)], 0);
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 7;
        check_less_or_equal(function__, "A[sym1__]", A[(sym1__ - 1)], 1);
      }
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 10;
        check_greater_or_equal(function__, "sigma_er[sym1__]",
                               sigma_er[(sym1__ - 1)], 0);
      }
      if (emit_transformed_parameters__) {
        out__.write(A);
        out__.write(alpha);
        out__.write(beta);
        out__.write(sigma_er);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double mu_A;
      mu_A = std::numeric_limits<double>::quiet_NaN();
      
      double mu_alpha;
      mu_alpha = std::numeric_limits<double>::quiet_NaN();
      
      double mu_beta;
      mu_beta = std::numeric_limits<double>::quiet_NaN();
      
      double mu_sigma_er;
      mu_sigma_er = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<double> log_lik;
      log_lik = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 22;
      mu_A = Phi_approx(rvalue(mu_p, "mu_p", index_uni(1)));
      current_statement__ = 23;
      mu_alpha = rvalue(mu_p, "mu_p", index_uni(2));
      current_statement__ = 24;
      mu_beta = rvalue(mu_p, "mu_p", index_uni(3));
      current_statement__ = 25;
      mu_sigma_er = stan::math::exp(rvalue(mu_p, "mu_p", index_uni(4)));
      {
        current_statement__ = 36;
        for (int i = 1; i <= N; ++i) {
          Eigen::Matrix<double, -1, 1> ev;
          ev = Eigen::Matrix<double, -1, 1>(2);
          stan::math::fill(ev, std::numeric_limits<double>::quiet_NaN());
          
          double PE;
          PE = std::numeric_limits<double>::quiet_NaN();
          
          current_statement__ = 28;
          assign(ev, initV, "assigning variable ev");
          current_statement__ = 29;
          assign(log_lik, 0, "assigning variable log_lik", index_uni(i));
          current_statement__ = 34;
          for (int t = 1; t <= rvalue(Tsubj, "Tsubj", index_uni(i)); ++t) {
            current_statement__ = 30;
            assign(log_lik,
              (rvalue(log_lik, "log_lik", index_uni(i)) +
                normal_lpdf<false>(
                  rvalue(rating, "rating", index_uni(t), index_uni(i)),
                  (rvalue(alpha, "alpha", index_uni(i)) +
                    (rvalue(beta, "beta", index_uni(i)) *
                      rvalue(ev, "ev",
                        index_uni(rvalue(stim, "stim",
                                    index_uni(t), index_uni(i)))))),
                  rvalue(sigma_er, "sigma_er", index_uni(i)))),
              "assigning variable log_lik", index_uni(i));
            current_statement__ = 31;
            PE = (rvalue(lambda, "lambda", index_uni(t), index_uni(i)) -
                   rvalue(ev, "ev",
                     index_uni(rvalue(stim, "stim",
                                 index_uni(t), index_uni(i)))));
            current_statement__ = 32;
            assign(ev,
              (rvalue(ev, "ev",
                 index_uni(rvalue(stim, "stim", index_uni(t), index_uni(i))))
                + (rvalue(A, "A", index_uni(i)) * PE)),
              "assigning variable ev", index_uni(rvalue(stim, "stim",
                                                   index_uni(t), index_uni(i))));
          }
        }
      }
      current_statement__ = 17;
      check_greater_or_equal(function__, "mu_A", mu_A, 0);
      current_statement__ = 17;
      check_less_or_equal(function__, "mu_A", mu_A, 1);
      current_statement__ = 20;
      check_greater_or_equal(function__, "mu_sigma_er", mu_sigma_er, 0);
      out__.write(mu_A);
      out__.write(mu_alpha);
      out__.write(mu_beta);
      out__.write(mu_sigma_er);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_p;
      mu_p = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
      stan::math::fill(mu_p, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        assign(mu_p, in__.read<local_scalar_t__>(),
          "assigning variable mu_p", index_uni(sym1__));
      }
      out__.write(mu_p);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
      stan::math::fill(sigma, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        assign(sigma, in__.read<local_scalar_t__>(),
          "assigning variable sigma", index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> A_pr;
      A_pr = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(A_pr, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        assign(A_pr, in__.read<local_scalar_t__>(),
          "assigning variable A_pr", index_uni(sym1__));
      }
      out__.write(A_pr);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_pr;
      alpha_pr = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(alpha_pr, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        assign(alpha_pr, in__.read<local_scalar_t__>(),
          "assigning variable alpha_pr", index_uni(sym1__));
      }
      out__.write(alpha_pr);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_pr;
      beta_pr = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(beta_pr, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        assign(beta_pr, in__.read<local_scalar_t__>(),
          "assigning variable beta_pr", index_uni(sym1__));
      }
      out__.write(beta_pr);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_er_pr;
      sigma_er_pr = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(sigma_er_pr, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        assign(sigma_er_pr, in__.read<local_scalar_t__>(),
          "assigning variable sigma_er_pr", index_uni(sym1__));
      }
      out__.write(sigma_er_pr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_p", "sigma", "A_pr", "alpha_pr",
      "beta_pr", "sigma_er_pr", "A", "alpha", "beta", "sigma_er", "mu_A",
      "mu_alpha", "mu_beta", "mu_sigma_er", "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(4)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "A_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_er_pr" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "A" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_er" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu_A");
      param_names__.emplace_back(std::string() + "mu_alpha");
      param_names__.emplace_back(std::string() + "mu_beta");
      param_names__.emplace_back(std::string() + "mu_sigma_er");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "A_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_er_pr" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "A" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_er" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu_A");
      param_names__.emplace_back(std::string() + "mu_alpha");
      param_names__.emplace_back(std::string() + "mu_beta");
      param_names__.emplace_back(std::string() + "mu_sigma_er");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"parameters\"},{\"name\":\"A_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"alpha_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"beta_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sigma_er_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_er\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_A\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_sigma_er\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"parameters\"},{\"name\":\"A_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"alpha_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"beta_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sigma_er_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_er\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_A\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_sigma_er\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((4 + 4) + N) + N) + N) + N);
      const size_t num_transformed = 
  (((N + N) + N) + N);
      const size_t num_gen_quantities = ((((1 + 1) +
                                                                   1) + 1) +
                                                                 N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((4 + 4) + N) + N) + N) + N);
      const size_t num_transformed = 
  (((N + N) + N) + N);
      const size_t num_gen_quantities = ((((1 + 1) +
                                                                   1) + 1) +
                                                                 N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 6> names__{"mu_p", "sigma", "A_pr",
   "alpha_pr", "beta_pr", "sigma_er_pr"};
     const std::array<Eigen::Index, 6> num_params__{4, 4, N, N, N, N};
    
     std::vector<double> params_r_flat__(num_params_r__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < num_params__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(params_r_flat__.size());
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = RW_model_model_namespace::RW_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return RW_model_model_namespace::profiles__;
}

#endif


