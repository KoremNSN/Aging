
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace AmbiguityModel_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 63> locations_array__ = 
{" (found before start of program)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 21, column 2 to column 33)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 22, column 2 to column 32)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 23, column 2 to column 31)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 24, column 2 to column 11)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 25, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 26, column 2 to column 11)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 27, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 28, column 2 to column 11)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 29, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 35, column 2 to column 14)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 36, column 2 to column 17)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 37, column 2 to column 19)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 38, column 2 to column 18)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 42, column 6 to column 120)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 43, column 6 to column 106)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 44, column 6 to column 50)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 41, column 19 to line 46, column 3)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 41, column 2 to line 46, column 3)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 48, column 6 to column 27)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 67, column 2 to column 20)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 68, column 2 to column 18)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 70, column 4 to column 54)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 71, column 4 to column 39)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 69, column 17 to line 72, column 5)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 69, column 2 to line 72, column 5)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 54, column 2 to column 24)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 55, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 56, column 2 to column 22)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 57, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 58, column 2 to column 24)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 59, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 60, column 2 to column 31)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 61, column 2 to column 33)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 62, column 2 to column 29)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 63, column 2 to column 29)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 4, column 2 to column 17)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 5, column 8 to column 9)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 5, column 2 to column 22)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 6, column 8 to column 9)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 6, column 2 to column 41)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 7, column 8 to column 9)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 7, column 2 to column 39)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 8, column 8 to column 9)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 8, column 2 to column 26)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 9, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 9, column 2 to column 33)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 10, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 10, column 2 to column 31)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 11, column 8 to column 9)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 11, column 2 to column 18)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 12, column 8 to column 9)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 12, column 2 to column 30)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 13, column 2 to column 21)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 21, column 18 to column 23)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 22, column 18 to column 23)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 23, column 18 to column 23)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 35, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 36, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 37, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 38, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 67, column 9 to column 10)",
 " (in '/home/nachshon/Documents/Projects/Aging/Aging/RiskandAmbiguity/models/AmbiguityModel.stan', line 68, column 9 to column 10)"};



class AmbiguityModel_model final : public model_base_crtp<AmbiguityModel_model> {

 private:
  int N;
  std::vector<int> choice;
  std::vector<int> refProbabilities;
  std::vector<int> refAmbiguities;
  std::vector<double> refValues;
  Eigen::Matrix<double, -1, 1> lotteryProbabilities__;
  Eigen::Matrix<double, -1, 1> lotteryAmbiguities__;
  std::vector<int> ID;
  std::vector<double> lotteryValues;
  int n_sub; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lotteryProbabilities{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lotteryAmbiguities{nullptr, 0};
 
 public:
  ~AmbiguityModel_model() { }
  
  inline std::string model_name() const final { return "AmbiguityModel_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  AmbiguityModel_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "AmbiguityModel_model_namespace::AmbiguityModel_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 36;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 36;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 36;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 37;
      validate_non_negative_index("choice", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization","choice","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      choice = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 38;
      choice = context__.vals_i("choice");
      current_statement__ = 39;
      validate_non_negative_index("refProbabilities", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization","refProbabilities","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      refProbabilities = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 40;
      refProbabilities = context__.vals_i("refProbabilities");
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 40;
        check_greater_or_equal(function__, "refProbabilities[sym1__]",
                               refProbabilities[(sym1__ - 1)], 0);
      }
      current_statement__ = 41;
      validate_non_negative_index("refAmbiguities", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","refAmbiguities","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      refAmbiguities = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 42;
      refAmbiguities = context__.vals_i("refAmbiguities");
      current_statement__ = 42;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 42;
        check_greater_or_equal(function__, "refAmbiguities[sym1__]",
                               refAmbiguities[(sym1__ - 1)], 0);
      }
      current_statement__ = 43;
      validate_non_negative_index("refValues", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization","refValues","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      refValues = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 44;
      refValues = context__.vals_r("refValues");
      current_statement__ = 45;
      validate_non_negative_index("lotteryProbabilities", "N", N);
      current_statement__ = 46;
      context__.validate_dims("data initialization","lotteryProbabilities",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      lotteryProbabilities__ = Eigen::Matrix<double, -1, 1>(N);
      new (&lotteryProbabilities) Eigen::Map<Eigen::Matrix<double, -1, 1>>(lotteryProbabilities__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> lotteryProbabilities_flat__;
        current_statement__ = 46;
        lotteryProbabilities_flat__ = context__.vals_r("lotteryProbabilities");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 46;
          assign(lotteryProbabilities,
            lotteryProbabilities_flat__[(pos__ - 1)],
            "assigning variable lotteryProbabilities", index_uni(sym1__));
          current_statement__ = 46;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 47;
      validate_non_negative_index("lotteryAmbiguities", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization","lotteryAmbiguities",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      lotteryAmbiguities__ = Eigen::Matrix<double, -1, 1>(N);
      new (&lotteryAmbiguities) Eigen::Map<Eigen::Matrix<double, -1, 1>>(lotteryAmbiguities__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> lotteryAmbiguities_flat__;
        current_statement__ = 48;
        lotteryAmbiguities_flat__ = context__.vals_r("lotteryAmbiguities");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 48;
          assign(lotteryAmbiguities, lotteryAmbiguities_flat__[(pos__ - 1)],
            "assigning variable lotteryAmbiguities", index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      validate_non_negative_index("ID", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization","ID","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      ID = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 50;
      ID = context__.vals_i("ID");
      current_statement__ = 51;
      validate_non_negative_index("lotteryValues", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization","lotteryValues","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      lotteryValues = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 52;
      lotteryValues = context__.vals_r("lotteryValues");
      current_statement__ = 53;
      context__.validate_dims("data initialization","n_sub","int",
           std::vector<size_t>{});
      n_sub = std::numeric_limits<int>::min();
      
      current_statement__ = 53;
      n_sub = context__.vals_i("n_sub")[(1 - 1)];
      current_statement__ = 53;
      check_greater_or_equal(function__, "n_sub", n_sub, 1);
      current_statement__ = 54;
      validate_non_negative_index("riskTol", "n_sub", n_sub);
      current_statement__ = 55;
      validate_non_negative_index("ambTol", "n_sub", n_sub);
      current_statement__ = 56;
      validate_non_negative_index("noise", "n_sub", n_sub);
      current_statement__ = 57;
      validate_non_negative_index("p", "N", N);
      current_statement__ = 58;
      validate_non_negative_index("uRef", "N", N);
      current_statement__ = 59;
      validate_non_negative_index("uLotto", "N", N);
      current_statement__ = 60;
      validate_non_negative_index("p_inv", "N", N);
      current_statement__ = 61;
      validate_non_negative_index("log_lik", "N", N);
      current_statement__ = 62;
      validate_non_negative_index("y_hat", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_sub + n_sub + n_sub + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "AmbiguityModel_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> riskTol;
      riskTol = Eigen::Matrix<local_scalar_t__, -1, 1>(n_sub);
      stan::math::fill(riskTol, DUMMY_VAR__);
      
      current_statement__ = 1;
      riskTol = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                  0, lp__, n_sub);
      Eigen::Matrix<local_scalar_t__, -1, 1> ambTol;
      ambTol = Eigen::Matrix<local_scalar_t__, -1, 1>(n_sub);
      stan::math::fill(ambTol, DUMMY_VAR__);
      
      current_statement__ = 2;
      ambTol = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                 0, lp__, n_sub);
      Eigen::Matrix<local_scalar_t__, -1, 1> noise;
      noise = Eigen::Matrix<local_scalar_t__, -1, 1>(n_sub);
      stan::math::fill(noise, DUMMY_VAR__);
      
      current_statement__ = 3;
      noise = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, n_sub);
      local_scalar_t__ aMu;
      aMu = DUMMY_VAR__;
      
      current_statement__ = 4;
      aMu = in__.template read<local_scalar_t__>();
      local_scalar_t__ aSig;
      aSig = DUMMY_VAR__;
      
      current_statement__ = 5;
      aSig = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ bMu;
      bMu = DUMMY_VAR__;
      
      current_statement__ = 6;
      bMu = in__.template read<local_scalar_t__>();
      local_scalar_t__ bSig;
      bSig = DUMMY_VAR__;
      
      current_statement__ = 7;
      bSig = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ nMu;
      nMu = DUMMY_VAR__;
      
      current_statement__ = 8;
      nMu = in__.template read<local_scalar_t__>();
      local_scalar_t__ nSig;
      nSig = DUMMY_VAR__;
      
      current_statement__ = 9;
      nSig = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(p, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> uRef;
      uRef = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(uRef, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> uLotto;
      uLotto = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(uLotto, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_inv;
      p_inv = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(p_inv, DUMMY_VAR__);
      
      current_statement__ = 18;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 14;
        assign(uLotto,
          (pow(rvalue(lotteryValues, "lotteryValues", index_uni(i)),
             rvalue(riskTol, "riskTol",
               index_uni(rvalue(ID, "ID", index_uni(i))))) *
            (rvalue(lotteryProbabilities, "lotteryProbabilities",
               index_uni(i)) -
              ((rvalue(ambTol, "ambTol",
                  index_uni(rvalue(ID, "ID", index_uni(i)))) *
                 rvalue(lotteryAmbiguities, "lotteryAmbiguities",
                   index_uni(i))) / 2))),
          "assigning variable uLotto", index_uni(i));
        current_statement__ = 15;
        assign(uRef,
          (pow(rvalue(refValues, "refValues", index_uni(i)),
             rvalue(riskTol, "riskTol",
               index_uni(rvalue(ID, "ID", index_uni(i))))) *
            (rvalue(refProbabilities, "refProbabilities", index_uni(i)) -
              ((rvalue(ambTol, "ambTol",
                  index_uni(rvalue(ID, "ID", index_uni(i)))) *
                 rvalue(refAmbiguities, "refAmbiguities", index_uni(i))) / 2))),
          "assigning variable uRef", index_uni(i));
        current_statement__ = 16;
        assign(p,
          ((rvalue(uLotto, "uLotto", index_uni(i)) -
             rvalue(uRef, "uRef", index_uni(i))) /
            rvalue(noise, "noise", index_uni(rvalue(ID, "ID", index_uni(i))))),
          "assigning variable p", index_uni(i));
      }
      current_statement__ = 19;
      assign(p_inv, inv_logit(p), "assigning variable p_inv");
      {
        current_statement__ = 26;
        lp_accum__.add(exponential_lpdf<propto__>(aSig, 1));
        current_statement__ = 27;
        lp_accum__.add(normal_lpdf<propto__>(aMu, 1, 1));
        current_statement__ = 28;
        lp_accum__.add(normal_lpdf<propto__>(bSig, 0, 1));
        current_statement__ = 29;
        lp_accum__.add(normal_lpdf<propto__>(bMu, 0, 2));
        current_statement__ = 30;
        lp_accum__.add(exponential_lpdf<propto__>(nSig, 1));
        current_statement__ = 31;
        lp_accum__.add(normal_lpdf<propto__>(nMu, 0, 1));
        current_statement__ = 32;
        lp_accum__.add(lognormal_lpdf<propto__>(noise, nMu, nSig));
        current_statement__ = 33;
        lp_accum__.add(lognormal_lpdf<propto__>(riskTol, aMu, aSig));
        current_statement__ = 34;
        lp_accum__.add(normal_lpdf<propto__>(ambTol, bMu, bSig));
        current_statement__ = 35;
        lp_accum__.add(binomial_lpmf<propto__>(choice, 1, p_inv));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "AmbiguityModel_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> riskTol;
      riskTol = Eigen::Matrix<double, -1, 1>(n_sub);
      stan::math::fill(riskTol, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      riskTol = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                  0, lp__, n_sub);
      Eigen::Matrix<double, -1, 1> ambTol;
      ambTol = Eigen::Matrix<double, -1, 1>(n_sub);
      stan::math::fill(ambTol, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      ambTol = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                 0, lp__, n_sub);
      Eigen::Matrix<double, -1, 1> noise;
      noise = Eigen::Matrix<double, -1, 1>(n_sub);
      stan::math::fill(noise, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      noise = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, n_sub);
      double aMu;
      aMu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      aMu = in__.template read<local_scalar_t__>();
      double aSig;
      aSig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      aSig = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double bMu;
      bMu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      bMu = in__.template read<local_scalar_t__>();
      double bSig;
      bSig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      bSig = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double nMu;
      nMu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      nMu = in__.template read<local_scalar_t__>();
      double nSig;
      nSig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      nSig = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<double, -1, 1> p;
      p = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> uRef;
      uRef = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(uRef, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> uLotto;
      uLotto = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(uLotto, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> p_inv;
      p_inv = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(p_inv, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(riskTol);
      out__.write(ambTol);
      out__.write(noise);
      out__.write(aMu);
      out__.write(aSig);
      out__.write(bMu);
      out__.write(bSig);
      out__.write(nMu);
      out__.write(nSig);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 18;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 14;
        assign(uLotto,
          (pow(rvalue(lotteryValues, "lotteryValues", index_uni(i)),
             rvalue(riskTol, "riskTol",
               index_uni(rvalue(ID, "ID", index_uni(i))))) *
            (rvalue(lotteryProbabilities, "lotteryProbabilities",
               index_uni(i)) -
              ((rvalue(ambTol, "ambTol",
                  index_uni(rvalue(ID, "ID", index_uni(i)))) *
                 rvalue(lotteryAmbiguities, "lotteryAmbiguities",
                   index_uni(i))) / 2))),
          "assigning variable uLotto", index_uni(i));
        current_statement__ = 15;
        assign(uRef,
          (pow(rvalue(refValues, "refValues", index_uni(i)),
             rvalue(riskTol, "riskTol",
               index_uni(rvalue(ID, "ID", index_uni(i))))) *
            (rvalue(refProbabilities, "refProbabilities", index_uni(i)) -
              ((rvalue(ambTol, "ambTol",
                  index_uni(rvalue(ID, "ID", index_uni(i)))) *
                 rvalue(refAmbiguities, "refAmbiguities", index_uni(i))) / 2))),
          "assigning variable uRef", index_uni(i));
        current_statement__ = 16;
        assign(p,
          ((rvalue(uLotto, "uLotto", index_uni(i)) -
             rvalue(uRef, "uRef", index_uni(i))) /
            rvalue(noise, "noise", index_uni(rvalue(ID, "ID", index_uni(i))))),
          "assigning variable p", index_uni(i));
      }
      current_statement__ = 19;
      assign(p_inv, inv_logit(p), "assigning variable p_inv");
      if (emit_transformed_parameters__) {
        out__.write(p);
        out__.write(uRef);
        out__.write(uLotto);
        out__.write(p_inv);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_hat;
      y_hat = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y_hat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 25;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 22;
        assign(log_lik,
          normal_lpdf<false>(rvalue(choice, "choice", index_uni(j)),
            rvalue(p_inv, "p_inv", index_uni(j)), 1),
          "assigning variable log_lik", index_uni(j));
        current_statement__ = 23;
        assign(y_hat,
          normal_rng(rvalue(p_inv, "p_inv", index_uni(j)), 1, base_rng__),
          "assigning variable y_hat", index_uni(j));
      }
      out__.write(log_lik);
      out__.write(y_hat);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> riskTol;
      riskTol = Eigen::Matrix<local_scalar_t__, -1, 1>(n_sub);
      stan::math::fill(riskTol, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= n_sub; ++sym1__) {
        assign(riskTol, in__.read<local_scalar_t__>(),
          "assigning variable riskTol", index_uni(sym1__));
      }
      out__.write_free_lb(0, riskTol);
      Eigen::Matrix<local_scalar_t__, -1, 1> ambTol;
      ambTol = Eigen::Matrix<local_scalar_t__, -1, 1>(n_sub);
      stan::math::fill(ambTol, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= n_sub; ++sym1__) {
        assign(ambTol, in__.read<local_scalar_t__>(),
          "assigning variable ambTol", index_uni(sym1__));
      }
      out__.write_free_lb(0, ambTol);
      Eigen::Matrix<local_scalar_t__, -1, 1> noise;
      noise = Eigen::Matrix<local_scalar_t__, -1, 1>(n_sub);
      stan::math::fill(noise, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= n_sub; ++sym1__) {
        assign(noise, in__.read<local_scalar_t__>(),
          "assigning variable noise", index_uni(sym1__));
      }
      out__.write_free_lb(0, noise);
      local_scalar_t__ aMu;
      aMu = DUMMY_VAR__;
      
      aMu = in__.read<local_scalar_t__>();
      out__.write(aMu);
      local_scalar_t__ aSig;
      aSig = DUMMY_VAR__;
      
      aSig = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, aSig);
      local_scalar_t__ bMu;
      bMu = DUMMY_VAR__;
      
      bMu = in__.read<local_scalar_t__>();
      out__.write(bMu);
      local_scalar_t__ bSig;
      bSig = DUMMY_VAR__;
      
      bSig = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, bSig);
      local_scalar_t__ nMu;
      nMu = DUMMY_VAR__;
      
      nMu = in__.read<local_scalar_t__>();
      out__.write(nMu);
      local_scalar_t__ nSig;
      nSig = DUMMY_VAR__;
      
      nSig = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, nSig);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"riskTol", "ambTol", "noise", "aMu",
      "aSig", "bMu", "bSig", "nMu", "nSig", "p", "uRef", "uLotto", "p_inv",
      "log_lik", "y_hat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(n_sub)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(n_sub)},
      std::vector<size_t>{static_cast<size_t>(n_sub)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_sub; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "riskTol" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_sub; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ambTol" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_sub; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "noise" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "aMu");
    param_names__.emplace_back(std::string() + "aSig");
    param_names__.emplace_back(std::string() + "bMu");
    param_names__.emplace_back(std::string() + "bSig");
    param_names__.emplace_back(std::string() + "nMu");
    param_names__.emplace_back(std::string() + "nSig");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "uRef" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "uLotto" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_inv" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_sub; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "riskTol" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_sub; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ambTol" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_sub; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "noise" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "aMu");
    param_names__.emplace_back(std::string() + "aSig");
    param_names__.emplace_back(std::string() + "bMu");
    param_names__.emplace_back(std::string() + "bSig");
    param_names__.emplace_back(std::string() + "nMu");
    param_names__.emplace_back(std::string() + "nSig");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "uRef" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "uLotto" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_inv" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"riskTol\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_sub) + "},\"block\":\"parameters\"},{\"name\":\"ambTol\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_sub) + "},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_sub) + "},\"block\":\"parameters\"},{\"name\":\"aMu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"aSig\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bMu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bSig\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nMu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nSig\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"uRef\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"uLotto\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_inv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"riskTol\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_sub) + "},\"block\":\"parameters\"},{\"name\":\"ambTol\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_sub) + "},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_sub) + "},\"block\":\"parameters\"},{\"name\":\"aMu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"aSig\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bMu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bSig\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nMu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nSig\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"uRef\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"uLotto\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_inv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((n_sub + n_sub) + n_sub) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((N + N) + N) + N);
      const size_t num_gen_quantities = (N + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((n_sub + n_sub) + n_sub) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((N + N) + N) + N);
      const size_t num_gen_quantities = (N + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 9> names__{"riskTol", "ambTol",
      "noise", "aMu", "aSig", "bMu", "bSig", "nMu", "nSig"};
      const std::array<Eigen::Index, 9> constrain_param_sizes__{n_sub, 
       n_sub, n_sub, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = AmbiguityModel_model_namespace::AmbiguityModel_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return AmbiguityModel_model_namespace::profiles__;
}

#endif


